
CRSPill_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080014c0  080014c0  000114c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e4  080014e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080014e4  080014e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014e4  080014e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014e4  080014e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014e8  080014e8  000114e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080014ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000000c  080014f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080014f8  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000060c3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fd  00000000  00000000  000260f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001f7b  00000000  00000000  00027af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  00029a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000638  00000000  00000000  00029f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e7c  00000000  00000000  0002a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007521  00000000  00000000  000423bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007eead  00000000  00000000  000498dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c878a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ad8  00000000  00000000  000c87dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080014a8 	.word	0x080014a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080014a8 	.word	0x080014a8

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b508      	push	{r3, lr}

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
	hcan.Init.Prescaler = 2;
 800014e:	2302      	movs	r3, #2
	hcan.Instance = CAN1;
 8000150:	480b      	ldr	r0, [pc, #44]	; (8000180 <MX_CAN_Init+0x34>)
	hcan.Init.Prescaler = 2;
 8000152:	4a0c      	ldr	r2, [pc, #48]	; (8000184 <MX_CAN_Init+0x38>)
	hcan.Init.Mode = CAN_MODE_NORMAL;
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000154:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
	hcan.Init.Prescaler = 2;
 8000158:	e9c0 2300 	strd	r2, r3, [r0]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	2300      	movs	r3, #0
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800015e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000162:	6183      	str	r3, [r0, #24]
	hcan.Init.AutoBusOff = DISABLE;
	hcan.Init.AutoWakeUp = DISABLE;
	hcan.Init.AutoRetransmission = DISABLE;
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000164:	8383      	strh	r3, [r0, #28]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800016a:	e9c0 1204 	strd	r1, r2, [r0, #16]
	hcan.Init.TransmitFifoPriority = DISABLE;
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 800016e:	f000 fa57 	bl	8000620 <HAL_CAN_Init>
 8000172:	b118      	cbz	r0, 800017c <MX_CAN_Init+0x30>
		Error_Handler();
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */
}
 8000174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8000178:	f000 b8d0 	b.w	800031c <Error_Handler>
}
 800017c:	bd08      	pop	{r3, pc}
 800017e:	bf00      	nop
 8000180:	20000028 	.word	0x20000028
 8000184:	40006400 	.word	0x40006400

08000188 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 8000188:	b510      	push	{r4, lr}
 800018a:	4604      	mov	r4, r0
 800018c:	b086      	sub	sp, #24

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800018e:	2210      	movs	r2, #16
 8000190:	2100      	movs	r1, #0
 8000192:	a802      	add	r0, sp, #8
 8000194:	f001 f980 	bl	8001498 <memset>
	if (canHandle->Instance == CAN1)
 8000198:	6822      	ldr	r2, [r4, #0]
 800019a:	4b1e      	ldr	r3, [pc, #120]	; (8000214 <HAL_CAN_MspInit+0x8c>)
 800019c:	429a      	cmp	r2, r3
 800019e:	d136      	bne.n	800020e <HAL_CAN_MspInit+0x86>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 80001a0:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80001a4:	69da      	ldr	r2, [r3, #28]
		PB9		 ------> CAN_TX
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_8;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001a6:	481c      	ldr	r0, [pc, #112]	; (8000218 <HAL_CAN_MspInit+0x90>)
		__HAL_RCC_CAN1_CLK_ENABLE();
 80001a8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80001ac:	61da      	str	r2, [r3, #28]
 80001ae:	69da      	ldr	r2, [r3, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001b0:	a902      	add	r1, sp, #8
		__HAL_RCC_CAN1_CLK_ENABLE();
 80001b2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80001b6:	9200      	str	r2, [sp, #0]
 80001b8:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80001ba:	699a      	ldr	r2, [r3, #24]
 80001bc:	f042 0208 	orr.w	r2, r2, #8
 80001c0:	619a      	str	r2, [r3, #24]
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	f003 0308 	and.w	r3, r3, #8
 80001c8:	9301      	str	r3, [sp, #4]
 80001ca:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80001cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001d0:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001d2:	f000 fdbb 	bl	8000d4c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80001d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001da:	2302      	movs	r3, #2
 80001dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001e0:	2303      	movs	r3, #3
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <HAL_CAN_MspInit+0x90>)
 80001e4:	a902      	add	r1, sp, #8
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001e6:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e8:	f000 fdb0 	bl	8000d4c <HAL_GPIO_Init>

		__HAL_AFIO_REMAP_CAN1_2();
 80001ec:	4a0b      	ldr	r2, [pc, #44]	; (800021c <HAL_CAN_MspInit+0x94>)

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80001ee:	2014      	movs	r0, #20
		__HAL_AFIO_REMAP_CAN1_2();
 80001f0:	6853      	ldr	r3, [r2, #4]
 80001f2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80001f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80001fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001fe:	6053      	str	r3, [r2, #4]
		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	4611      	mov	r1, r2
 8000204:	f000 fd4e 	bl	8000ca4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000208:	2014      	movs	r0, #20
 800020a:	f000 fd7d 	bl	8000d08 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}
}
 800020e:	b006      	add	sp, #24
 8000210:	bd10      	pop	{r4, pc}
 8000212:	bf00      	nop
 8000214:	40006400 	.word	0x40006400
 8000218:	40010c00 	.word	0x40010c00
 800021c:	40010000 	.word	0x40010000

08000220 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000220:	b500      	push	{lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000224:	2100      	movs	r1, #0
 8000226:	ab01      	add	r3, sp, #4
 8000228:	aa03      	add	r2, sp, #12
 800022a:	f000 fb8a 	bl	8000942 <HAL_CAN_GetRxMessage>
 800022e:	b918      	cbnz	r0, 8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
	{
		can_callback(&RxHeader, RxData);
 8000230:	a901      	add	r1, sp, #4
 8000232:	a803      	add	r0, sp, #12
 8000234:	f000 f8f0 	bl	8000418 <can_callback>
	}
}
 8000238:	b00b      	add	sp, #44	; 0x2c
 800023a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000240 <can_setup>:

// C17/18まではvoidを入れましょう(C23以降は無くても良いので、互換性を気にしないなら入れないでください)
void can_setup(void)
{
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = 0;  // フィルターID(上位16bit)
 8000240:	2300      	movs	r3, #0
{
 8000242:	b500      	push	{lr}
 8000244:	b08b      	sub	sp, #44	; 0x2c
	filter.FilterIdLow = 0;  // フィルターID(下位16bit)
	filter.FilterMaskIdHigh = 0;  // フィルターマスク(上位16bit)
	filter.FilterMaskIdLow = 0;  // フィルターマスク(下位16bit)
	filter.FilterScale = CAN_FILTERSCALE_32BIT;  // フィルタースケール
 8000246:	2201      	movs	r2, #1
	filter.FilterIdLow = 0;  // フィルターID(下位16bit)
 8000248:	e9cd 3300 	strd	r3, r3, [sp]
	filter.FilterMaskIdLow = 0;  // フィルターマスク(下位16bit)
 800024c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;  // フィルターに割り当てるFIFO
	filter.FilterBank = 0;  // フィルターバンクNo
 8000250:	e9cd 3304 	strd	r3, r3, [sp, #16]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;  // フィルターモード
 8000254:	9306      	str	r3, [sp, #24]
	filter.SlaveStartFilterBank = 14;  // スレーブCANの開始フィルターバンクNo
 8000256:	230e      	movs	r3, #14
	filter.FilterActivation = ENABLE;  // フィルター有効化

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000258:	4669      	mov	r1, sp
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <can_setup+0x48>)
	filter.FilterActivation = ENABLE;  // フィルター有効化
 800025c:	e9cd 2308 	strd	r2, r3, [sp, #32]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;  // フィルタースケール
 8000260:	9207      	str	r2, [sp, #28]
	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000262:	f000 fa5e 	bl	8000722 <HAL_CAN_ConfigFilter>
 8000266:	b108      	cbz	r0, 800026c <can_setup+0x2c>
	{
		Error_Handler();
 8000268:	f000 f858 	bl	800031c <Error_Handler>
	}

	HAL_CAN_Start(&hcan);
 800026c:	4806      	ldr	r0, [pc, #24]	; (8000288 <can_setup+0x48>)
 800026e:	f000 facf 	bl	8000810 <HAL_CAN_Start>

	// 割り込み処理の開始
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000272:	2102      	movs	r1, #2
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <can_setup+0x48>)
 8000276:	f000 fbe6 	bl	8000a46 <HAL_CAN_ActivateNotification>
 800027a:	b108      	cbz	r0, 8000280 <can_setup+0x40>
	{
		Error_Handler();
 800027c:	f000 f84e 	bl	800031c <Error_Handler>
	}
}
 8000280:	b00b      	add	sp, #44	; 0x2c
 8000282:	f85d fb04 	ldr.w	pc, [sp], #4
 8000286:	bf00      	nop
 8000288:	20000028 	.word	0x20000028

0800028c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	2210      	movs	r2, #16
{
 800028e:	b510      	push	{r4, lr}
 8000290:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	eb0d 0002 	add.w	r0, sp, r2
 8000296:	2100      	movs	r1, #0
 8000298:	f001 f8fe 	bl	8001498 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029c:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EMS_LED_Pin|CAN_LED_Pin, GPIO_PIN_RESET);
 800029e:	4c1e      	ldr	r4, [pc, #120]	; (8000318 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, EMS_LED_Pin|CAN_LED_Pin, GPIO_PIN_RESET);
 80002a2:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a4:	f042 0210 	orr.w	r2, r2, #16
 80002a8:	619a      	str	r2, [r3, #24]
 80002aa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, EMS_LED_Pin|CAN_LED_Pin, GPIO_PIN_RESET);
 80002ac:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	f002 0210 	and.w	r2, r2, #16
 80002b4:	9200      	str	r2, [sp, #0]
 80002b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b8:	699a      	ldr	r2, [r3, #24]
 80002ba:	f042 0220 	orr.w	r2, r2, #32
 80002be:	619a      	str	r2, [r3, #24]
 80002c0:	699a      	ldr	r2, [r3, #24]
 80002c2:	f002 0220 	and.w	r2, r2, #32
 80002c6:	9201      	str	r2, [sp, #4]
 80002c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	699a      	ldr	r2, [r3, #24]
 80002cc:	f042 0204 	orr.w	r2, r2, #4
 80002d0:	619a      	str	r2, [r3, #24]
 80002d2:	699a      	ldr	r2, [r3, #24]
 80002d4:	f002 0204 	and.w	r2, r2, #4
 80002d8:	9202      	str	r2, [sp, #8]
 80002da:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	699a      	ldr	r2, [r3, #24]
 80002de:	f042 0208 	orr.w	r2, r2, #8
 80002e2:	619a      	str	r2, [r3, #24]
 80002e4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, EMS_LED_Pin|CAN_LED_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e8:	f003 0308 	and.w	r3, r3, #8
 80002ec:	9303      	str	r3, [sp, #12]
 80002ee:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, EMS_LED_Pin|CAN_LED_Pin, GPIO_PIN_RESET);
 80002f0:	f000 fe30 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EMS_LED_Pin|CAN_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80002f8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fa:	2100      	movs	r1, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000302:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000304:	e9cd 1306 	strd	r1, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000308:	a904      	add	r1, sp, #16
 800030a:	f000 fd1f 	bl	8000d4c <HAL_GPIO_Init>

}
 800030e:	b008      	add	sp, #32
 8000310:	bd10      	pop	{r4, pc}
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000
 8000318:	40011000 	.word	0x40011000

0800031c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800031c:	b082      	sub	sp, #8
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  volatile char dummy = 0; // おまじない
 8000320:	2300      	movs	r3, #0
 8000322:	f88d 3007 	strb.w	r3, [sp, #7]
	  (void)dummy;
 8000326:	f89d 2007 	ldrb.w	r2, [sp, #7]
  while (1)
 800032a:	e7fa      	b.n	8000322 <Error_Handler+0x6>

0800032c <SystemClock_Config>:
{
 800032c:	b510      	push	{r4, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000330:	2214      	movs	r2, #20
 8000332:	2100      	movs	r1, #0
 8000334:	a808      	add	r0, sp, #32
 8000336:	f001 f8af 	bl	8001498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033a:	2214      	movs	r2, #20
 800033c:	2100      	movs	r1, #0
 800033e:	a801      	add	r0, sp, #4
 8000340:	f001 f8aa 	bl	8001498 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000344:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034c:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000350:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000354:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f000 fe07 	bl	8000f70 <HAL_RCC_OscConfig>
 8000362:	b108      	cbz	r0, 8000368 <SystemClock_Config+0x3c>
    Error_Handler();
 8000364:	f7ff ffda 	bl	800031c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000378:	4621      	mov	r1, r4
 800037a:	a801      	add	r0, sp, #4
 800037c:	f000 ffc8 	bl	8001310 <HAL_RCC_ClockConfig>
 8000380:	2800      	cmp	r0, #0
 8000382:	d1ef      	bne.n	8000364 <SystemClock_Config+0x38>
}
 8000384:	b010      	add	sp, #64	; 0x40
 8000386:	bd10      	pop	{r4, pc}

08000388 <main>:
{
 8000388:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 800038a:	f000 f913 	bl	80005b4 <HAL_Init>
	  volatile char dummy = 0;  // おまじない
 800038e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000390:	f7ff ffcc 	bl	800032c <SystemClock_Config>
  MX_GPIO_Init();
 8000394:	f7ff ff7a 	bl	800028c <MX_GPIO_Init>
  MX_CAN_Init();
 8000398:	f7ff fed8 	bl	800014c <MX_CAN_Init>
  setup();
 800039c:	f000 f852 	bl	8000444 <setup>
	  volatile char dummy = 0;  // おまじない
 80003a0:	f88d 4007 	strb.w	r4, [sp, #7]
	  (void)dummy;
 80003a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	  loop();
 80003a8:	f000 f890 	bl	80004cc <loop>
  while (1)
 80003ac:	e7f8      	b.n	80003a0 <main+0x18>
	...

080003b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <HAL_MspInit+0x3c>)
{
 80003b2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b4:	699a      	ldr	r2, [r3, #24]
 80003b6:	f042 0201 	orr.w	r2, r2, #1
 80003ba:	619a      	str	r2, [r3, #24]
 80003bc:	699a      	ldr	r2, [r3, #24]
 80003be:	f002 0201 	and.w	r2, r2, #1
 80003c2:	9200      	str	r2, [sp, #0]
 80003c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	69da      	ldr	r2, [r3, #28]
 80003c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003cc:	61da      	str	r2, [r3, #28]
 80003ce:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d0:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003da:	6853      	ldr	r3, [r2, #4]
 80003dc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	b002      	add	sp, #8
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010000 	.word	0x40010000

080003f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <NMI_Handler>

080003f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <HardFault_Handler>

080003f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <MemManage_Handler>

080003fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <BusFault_Handler>

080003fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <UsageFault_Handler>

080003fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fe:	4770      	bx	lr

08000400 <DebugMon_Handler>:
 8000400:	4770      	bx	lr

08000402 <PendSV_Handler>:
 8000402:	4770      	bx	lr

08000404 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000404:	f000 b8e8 	b.w	80005d8 <HAL_IncTick>

08000408 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000408:	4801      	ldr	r0, [pc, #4]	; (8000410 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800040a:	f000 bb39 	b.w	8000a80 <HAL_CAN_IRQHandler>
 800040e:	bf00      	nop
 8000410:	20000028 	.word	0x20000028

08000414 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000414:	4770      	bx	lr
	...

08000418 <can_callback>:
{
	uint8_t rxBuffer[8]{};
} canCallbackState{};

//CANを受信したときに呼ばれるコールバックです。割り込みです。
extern "C" void can_callback(CAN_RxHeaderTypeDef * RxHeader, const uint8_t * RxData){
 8000418:	b510      	push	{r4, lr}
 800041a:	460c      	mov	r4, r1
	(void)RxHeader;

	HAL_GPIO_TogglePin(CAN_LED_GPIO_Port, CAN_LED_Pin);
 800041c:	4807      	ldr	r0, [pc, #28]	; (800043c <can_callback+0x24>)
 800041e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000422:	f000 fd9c 	bl	8000f5e <HAL_GPIO_TogglePin>
	for(int i = 0; i < 8; i++){
 8000426:	4a06      	ldr	r2, [pc, #24]	; (8000440 <can_callback+0x28>)
 8000428:	1e63      	subs	r3, r4, #1
 800042a:	3407      	adds	r4, #7
		canCallbackState.rxBuffer[i] = RxData[i];
 800042c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
	for(int i = 0; i < 8; i++){
 8000430:	42a3      	cmp	r3, r4
		canCallbackState.rxBuffer[i] = RxData[i];
 8000432:	f802 1b01 	strb.w	r1, [r2], #1
	for(int i = 0; i < 8; i++){
 8000436:	d1f9      	bne.n	800042c <can_callback+0x14>
	}
}
 8000438:	bd10      	pop	{r4, pc}
 800043a:	bf00      	nop
 800043c:	40011000 	.word	0x40011000
 8000440:	20000050 	.word	0x20000050

08000444 <setup>:
{
	CAN_TxHeaderTypeDef TxHeader;
};

//起動時に１度だけ呼ばれます。初期化をします。
extern "C" Global setup(){
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	4604      	mov	r4, r0
 8000448:	2503      	movs	r5, #3
	//LEDをチカチカ
	for(int i = 0; i < 3; i++){
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_SET);
 800044a:	4e1e      	ldr	r6, [pc, #120]	; (80004c4 <setup+0x80>)
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000452:	4630      	mov	r0, r6
 8000454:	f000 fd7e 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EMS_LED_GPIO_Port, EMS_LED_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045e:	4630      	mov	r0, r6
 8000460:	f000 fd78 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000464:	2064      	movs	r0, #100	; 0x64
 8000466:	f000 f8c9 	bl	80005fc <HAL_Delay>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000470:	4630      	mov	r0, r6
 8000472:	f000 fd6f 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EMS_LED_GPIO_Port, EMS_LED_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047c:	4630      	mov	r0, r6
 800047e:	f000 fd69 	bl	8000f54 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000482:	2064      	movs	r0, #100	; 0x64
 8000484:	f000 f8ba 	bl	80005fc <HAL_Delay>
	for(int i = 0; i < 3; i++){
 8000488:	3d01      	subs	r5, #1
 800048a:	d1df      	bne.n	800044c <setup+0x8>
	}
	canCallbackState.rxBuffer[0] = 0x11;
 800048c:	2211      	movs	r2, #17
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <setup+0x84>)
 8000490:	701a      	strb	r2, [r3, #0]
	canCallbackState.rxBuffer[1] = 0x22;
 8000492:	2222      	movs	r2, #34	; 0x22
 8000494:	705a      	strb	r2, [r3, #1]
	canCallbackState.rxBuffer[2] = 0x33;
 8000496:	2233      	movs	r2, #51	; 0x33
 8000498:	709a      	strb	r2, [r3, #2]
	canCallbackState.rxBuffer[3] = 0x44;
 800049a:	2244      	movs	r2, #68	; 0x44
 800049c:	70da      	strb	r2, [r3, #3]
	canCallbackState.rxBuffer[4] = 0x55;
 800049e:	2255      	movs	r2, #85	; 0x55
 80004a0:	711a      	strb	r2, [r3, #4]
	canCallbackState.rxBuffer[5] = 0x66;
 80004a2:	2266      	movs	r2, #102	; 0x66
 80004a4:	715a      	strb	r2, [r3, #5]
	canCallbackState.rxBuffer[6] = 0x77;
 80004a6:	2277      	movs	r2, #119	; 0x77
 80004a8:	719a      	strb	r2, [r3, #6]
	canCallbackState.rxBuffer[7] = 0x88;
 80004aa:	2288      	movs	r2, #136	; 0x88
 80004ac:	71da      	strb	r2, [r3, #7]
	TxHeader.IDE = CAN_ID_STD;  // 標準ID(11ﾋﾞｯﾄ)
	TxHeader.DLC = 8;  // データ長は8バイトに
	TxHeader.TransmitGlobalTime = DISABLE;

	//CANの初期化です。この後からCANの送受信が行われます。
	can_setup();
 80004ae:	f7ff fec7 	bl	8000240 <can_setup>

	return Global{TxHeader};
 80004b2:	2308      	movs	r3, #8
}
 80004b4:	4620      	mov	r0, r4
	return Global{TxHeader};
 80004b6:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80004ba:	6025      	str	r5, [r4, #0]
 80004bc:	6123      	str	r3, [r4, #16]
 80004be:	7525      	strb	r5, [r4, #20]
}
 80004c0:	bd70      	pop	{r4, r5, r6, pc}
 80004c2:	bf00      	nop
 80004c4:	40011000 	.word	0x40011000
 80004c8:	20000050 	.word	0x20000050

080004cc <loop>:


//ループです。実行中は呼ばれ続けます。
extern "C" void loop(Global global){
 80004cc:	b084      	sub	sp, #16
 80004ce:	b507      	push	{r0, r1, r2, lr}
 80004d0:	f10d 0c10 	add.w	ip, sp, #16
 80004d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//mailboxが一杯でなければCANを送信します。
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <loop+0x48>)
 80004da:	f000 fa1e 	bl	800091a <HAL_CAN_GetTxMailboxesFreeLevel>
 80004de:	b180      	cbz	r0, 8000502 <loop+0x36>
		global.TxHeader.StdId++;
 80004e0:	9b04      	ldr	r3, [sp, #16]
		if(global.TxHeader.StdId > 10) global.TxHeader.StdId = 0x0;
		HAL_GPIO_TogglePin(EMS_LED_GPIO_Port,EMS_LED_Pin);
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		global.TxHeader.StdId++;
 80004e6:	3301      	adds	r3, #1
		if(global.TxHeader.StdId > 10) global.TxHeader.StdId = 0x0;
 80004e8:	2b0a      	cmp	r3, #10
 80004ea:	bf88      	it	hi
 80004ec:	2300      	movhi	r3, #0
		HAL_GPIO_TogglePin(EMS_LED_GPIO_Port,EMS_LED_Pin);
 80004ee:	480a      	ldr	r0, [pc, #40]	; (8000518 <loop+0x4c>)
		if(global.TxHeader.StdId > 10) global.TxHeader.StdId = 0x0;
 80004f0:	9304      	str	r3, [sp, #16]
		HAL_GPIO_TogglePin(EMS_LED_GPIO_Port,EMS_LED_Pin);
 80004f2:	f000 fd34 	bl	8000f5e <HAL_GPIO_TogglePin>
		uint32_t TxMailbox;
		HAL_CAN_AddTxMessage(&hcan, &global.TxHeader, canCallbackState.rxBuffer, &TxMailbox);
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <loop+0x50>)
 80004f8:	4806      	ldr	r0, [pc, #24]	; (8000514 <loop+0x48>)
 80004fa:	ab01      	add	r3, sp, #4
 80004fc:	a904      	add	r1, sp, #16
 80004fe:	f000 f9b5 	bl	800086c <HAL_CAN_AddTxMessage>
	}
	//ちょっと待ちます。
	HAL_Delay(10);
 8000502:	200a      	movs	r0, #10
 8000504:	f000 f87a 	bl	80005fc <HAL_Delay>
}
 8000508:	b003      	add	sp, #12
 800050a:	f85d eb04 	ldr.w	lr, [sp], #4
 800050e:	b004      	add	sp, #16
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000028 	.word	0x20000028
 8000518:	40011000 	.word	0x40011000
 800051c:	20000050 	.word	0x20000050

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f7ff ff65 	bl	8000414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f000 ff81 	bl	8001450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff ff1b 	bl	8000388 <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800055c:	080014ec 	.word	0x080014ec
  ldr r2, =_sbss
 8000560:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000564:	2000005c 	.word	0x2000005c

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_InitTick+0x3c>)
{
 8000570:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000572:	7818      	ldrb	r0, [r3, #0]
 8000574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000578:	fbb3 f3f0 	udiv	r3, r3, r0
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <HAL_InitTick+0x40>)
 800057e:	6810      	ldr	r0, [r2, #0]
 8000580:	fbb0 f0f3 	udiv	r0, r0, r3
 8000584:	f000 fbce 	bl	8000d24 <HAL_SYSTICK_Config>
 8000588:	4604      	mov	r4, r0
 800058a:	b958      	cbnz	r0, 80005a4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058c:	2d0f      	cmp	r5, #15
 800058e:	d809      	bhi.n	80005a4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	4602      	mov	r2, r0
 8000592:	4629      	mov	r1, r5
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 fb84 	bl	8000ca4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4620      	mov	r0, r4
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <HAL_InitTick+0x44>)
 80005a0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005a4:	2001      	movs	r0, #1
 80005a6:	e7fc      	b.n	80005a2 <HAL_InitTick+0x36>
 80005a8:	20000004 	.word	0x20000004
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000008 	.word	0x20000008

080005b4 <HAL_Init>:
{
 80005b4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ba:	6813      	ldr	r3, [r2, #0]
 80005bc:	f043 0310 	orr.w	r3, r3, #16
 80005c0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	f000 fb5d 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c6:	200f      	movs	r0, #15
 80005c8:	f7ff ffd0 	bl	800056c <HAL_InitTick>
  HAL_MspInit();
 80005cc:	f7ff fef0 	bl	80003b0 <HAL_MspInit>
}
 80005d0:	2000      	movs	r0, #0
 80005d2:	bd08      	pop	{r3, pc}
 80005d4:	40022000 	.word	0x40022000

080005d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <HAL_IncTick+0x10>)
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <HAL_IncTick+0x14>)
 80005dc:	6811      	ldr	r1, [r2, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	440b      	add	r3, r1
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000058 	.word	0x20000058
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_GetTick+0x8>)
 80005f2:	6818      	ldr	r0, [r3, #0]
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000058 	.word	0x20000058

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff6 	bl	80005f0 <HAL_GetTick>
 8000604:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000608:	bf1e      	ittt	ne
 800060a:	4b04      	ldrne	r3, [pc, #16]	; (800061c <HAL_Delay+0x20>)
 800060c:	781b      	ldrbne	r3, [r3, #0]
 800060e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000610:	f7ff ffee 	bl	80005f0 <HAL_GetTick>
 8000614:	1b43      	subs	r3, r0, r5
 8000616:	42a3      	cmp	r3, r4
 8000618:	d3fa      	bcc.n	8000610 <HAL_Delay+0x14>
  {
  }
}
 800061a:	bd38      	pop	{r3, r4, r5, pc}
 800061c:	20000004 	.word	0x20000004

08000620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000622:	4604      	mov	r4, r0
 8000624:	2800      	cmp	r0, #0
 8000626:	d074      	beq.n	8000712 <HAL_CAN_Init+0xf2>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000628:	f890 3020 	ldrb.w	r3, [r0, #32]
 800062c:	b90b      	cbnz	r3, 8000632 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800062e:	f7ff fdab 	bl	8000188 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000632:	6822      	ldr	r2, [r4, #0]
 8000634:	6813      	ldr	r3, [r2, #0]
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800063c:	f7ff ffd8 	bl	80005f0 <HAL_GetTick>
 8000640:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	07d1      	lsls	r1, r2, #31
 8000648:	d557      	bpl.n	80006fa <HAL_CAN_Init+0xda>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	f022 0202 	bic.w	r2, r2, #2
 8000650:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000652:	f7ff ffcd 	bl	80005f0 <HAL_GetTick>
 8000656:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000658:	6823      	ldr	r3, [r4, #0]
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	0792      	lsls	r2, r2, #30
 800065e:	d45a      	bmi.n	8000716 <HAL_CAN_Init+0xf6>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000660:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000662:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000664:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	bf0c      	ite	eq
 800066a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800066e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000672:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000674:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000676:	7e62      	ldrb	r2, [r4, #25]
 8000678:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	bf0c      	ite	eq
 800067e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000682:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000686:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000688:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800068a:	7ea2      	ldrb	r2, [r4, #26]
 800068c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	bf0c      	ite	eq
 8000692:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000696:	f022 0220 	bicne.w	r2, r2, #32
 800069a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800069c:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800069e:	7ee2      	ldrb	r2, [r4, #27]
 80006a0:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	bf0c      	ite	eq
 80006a6:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80006aa:	f042 0210 	orrne.w	r2, r2, #16
 80006ae:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006b0:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80006b2:	7f22      	ldrb	r2, [r4, #28]
 80006b4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	bf0c      	ite	eq
 80006ba:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80006be:	f022 0208 	bicne.w	r2, r2, #8
 80006c2:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006c4:	6823      	ldr	r3, [r4, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80006c6:	7f62      	ldrb	r2, [r4, #29]
 80006c8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	bf0c      	ite	eq
 80006ce:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006d2:	f022 0204 	bicne.w	r2, r2, #4
 80006d6:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80006d8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80006dc:	4313      	orrs	r3, r2
 80006de:	6922      	ldr	r2, [r4, #16]
 80006e0:	6821      	ldr	r1, [r4, #0]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	6962      	ldr	r2, [r4, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	6862      	ldr	r2, [r4, #4]
 80006ea:	3a01      	subs	r2, #1
 80006ec:	4313      	orrs	r3, r2
 80006ee:	61cb      	str	r3, [r1, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80006f0:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006f2:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80006f4:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80006f8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006fa:	f7ff ff79 	bl	80005f0 <HAL_GetTick>
 80006fe:	1b40      	subs	r0, r0, r5
 8000700:	280a      	cmp	r0, #10
 8000702:	d99e      	bls.n	8000642 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800070c:	2305      	movs	r3, #5
 800070e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000712:	2001      	movs	r0, #1
 8000714:	e7f0      	b.n	80006f8 <HAL_CAN_Init+0xd8>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000716:	f7ff ff6b 	bl	80005f0 <HAL_GetTick>
 800071a:	1b40      	subs	r0, r0, r5
 800071c:	280a      	cmp	r0, #10
 800071e:	d99b      	bls.n	8000658 <HAL_CAN_Init+0x38>
 8000720:	e7f0      	b.n	8000704 <HAL_CAN_Init+0xe4>

08000722 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000722:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000724:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000728:	3b01      	subs	r3, #1
 800072a:	2b01      	cmp	r3, #1
 800072c:	d86a      	bhi.n	8000804 <HAL_CAN_ConfigFilter+0xe2>
  CAN_TypeDef *can_ip = hcan->Instance;
 800072e:	6803      	ldr	r3, [r0, #0]
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000730:	2001      	movs	r0, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000732:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000736:	f042 0201 	orr.w	r2, r2, #1
 800073a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800073e:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000740:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000744:	f002 021f 	and.w	r2, r2, #31
 8000748:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800074c:	ea24 0402 	bic.w	r4, r4, r2
 8000750:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000754:	69cc      	ldr	r4, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000756:	43d0      	mvns	r0, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000758:	b9ac      	cbnz	r4, 8000786 <HAL_CAN_ConfigFilter+0x64>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800075a:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 800075e:	4004      	ands	r4, r0
 8000760:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000764:	68ce      	ldr	r6, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000766:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000768:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800076a:	3448      	adds	r4, #72	; 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800076c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000770:	f843 5034 	str.w	r5, [r3, r4, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000774:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000776:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000778:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800077a:	3448      	adds	r4, #72	; 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800077c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000780:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000784:	6065      	str	r5, [r4, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000786:	69cc      	ldr	r4, [r1, #28]
 8000788:	2c01      	cmp	r4, #1
 800078a:	d115      	bne.n	80007b8 <HAL_CAN_ConfigFilter+0x96>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800078c:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8000790:	4314      	orrs	r4, r2
 8000792:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000796:	680e      	ldr	r6, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000798:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800079a:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800079c:	3448      	adds	r4, #72	; 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800079e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80007a2:	f843 5034 	str.w	r5, [r3, r4, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80007a6:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80007a8:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80007aa:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80007ac:	3448      	adds	r4, #72	; 0x48
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80007ae:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80007b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80007b6:	6065      	str	r5, [r4, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80007b8:	698c      	ldr	r4, [r1, #24]
 80007ba:	b9dc      	cbnz	r4, 80007f4 <HAL_CAN_ConfigFilter+0xd2>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80007bc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80007c0:	4004      	ands	r4, r0
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80007c2:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80007c6:	690c      	ldr	r4, [r1, #16]
 80007c8:	b9c4      	cbnz	r4, 80007fc <HAL_CAN_ConfigFilter+0xda>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80007ca:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 80007ce:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80007d0:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 80007d4:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80007d6:	6a09      	ldr	r1, [r1, #32]
 80007d8:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80007da:	bf02      	ittt	eq
 80007dc:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 80007e0:	430a      	orreq	r2, r1
 80007e2:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80007e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80007ea:	f022 0201 	bic.w	r2, r2, #1
 80007ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80007f4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80007f8:	4314      	orrs	r4, r2
 80007fa:	e7e2      	b.n	80007c2 <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80007fc:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000800:	4310      	orrs	r0, r2
 8000802:	e7e5      	b.n	80007d0 <HAL_CAN_ConfigFilter+0xae>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000804:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080a:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800080c:	2001      	movs	r0, #1
 800080e:	e7f0      	b.n	80007f2 <HAL_CAN_ConfigFilter+0xd0>

08000810 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000810:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000812:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000816:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000818:	2b01      	cmp	r3, #1
 800081a:	b2dd      	uxtb	r5, r3
 800081c:	d120      	bne.n	8000860 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800081e:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000820:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000822:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000826:	6813      	ldr	r3, [r2, #0]
 8000828:	f023 0301 	bic.w	r3, r3, #1
 800082c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800082e:	f7ff fedf 	bl	80005f0 <HAL_GetTick>
 8000832:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000834:	6823      	ldr	r3, [r4, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f013 0301 	ands.w	r3, r3, #1
 800083c:	d102      	bne.n	8000844 <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 800083e:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000840:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8000842:	e00b      	b.n	800085c <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000844:	f7ff fed4 	bl	80005f0 <HAL_GetTick>
 8000848:	1b80      	subs	r0, r0, r6
 800084a:	280a      	cmp	r0, #10
 800084c:	d9f2      	bls.n	8000834 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800084e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000856:	2305      	movs	r3, #5
 8000858:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 800085c:	4628      	mov	r0, r5
 800085e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000860:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000862:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000864:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000868:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800086a:	e7f7      	b.n	800085c <HAL_CAN_Start+0x4c>

0800086c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800086e:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000872:	6804      	ldr	r4, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000874:	3d01      	subs	r5, #1
 8000876:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000878:	68a4      	ldr	r4, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800087a:	d84a      	bhi.n	8000912 <HAL_CAN_AddTxMessage+0xa6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800087c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000880:	d043      	beq.n	800090a <HAL_CAN_AddTxMessage+0x9e>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000882:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000886:	2c03      	cmp	r4, #3
 8000888:	f04f 0501 	mov.w	r5, #1
 800088c:	d105      	bne.n	800089a <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800088e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000894:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000896:	2001      	movs	r0, #1
 8000898:	e031      	b.n	80008fe <HAL_CAN_AddTxMessage+0x92>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800089a:	40a5      	lsls	r5, r4
 800089c:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800089e:	688b      	ldr	r3, [r1, #8]
 80008a0:	6806      	ldr	r6, [r0, #0]
 80008a2:	68cd      	ldr	r5, [r1, #12]
 80008a4:	f104 0718 	add.w	r7, r4, #24
 80008a8:	bb53      	cbnz	r3, 8000900 <HAL_CAN_AddTxMessage+0x94>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80008aa:	680b      	ldr	r3, [r1, #0]
 80008ac:	ea45 5343 	orr.w	r3, r5, r3, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80008b0:	013d      	lsls	r5, r7, #4
 80008b2:	5173      	str	r3, [r6, r5]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80008b4:	6803      	ldr	r3, [r0, #0]
 80008b6:	690d      	ldr	r5, [r1, #16]
 80008b8:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80008bc:	605d      	str	r5, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80008be:	7d0b      	ldrb	r3, [r1, #20]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	ea4f 1304 	mov.w	r3, r4, lsl #4
 80008c6:	d107      	bne.n	80008d8 <HAL_CAN_AddTxMessage+0x6c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80008c8:	6801      	ldr	r1, [r0, #0]
 80008ca:	4419      	add	r1, r3
 80008cc:	f8d1 4184 	ldr.w	r4, [r1, #388]	; 0x184
 80008d0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80008d4:	f8c1 4184 	str.w	r4, [r1, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80008d8:	6801      	ldr	r1, [r0, #0]
 80008da:	6854      	ldr	r4, [r2, #4]
 80008dc:	4419      	add	r1, r3
 80008de:	f8c1 418c 	str.w	r4, [r1, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80008e2:	6811      	ldr	r1, [r2, #0]
 80008e4:	6802      	ldr	r2, [r0, #0]
 80008e6:	441a      	add	r2, r3
 80008e8:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008ec:	6802      	ldr	r2, [r0, #0]
      return HAL_OK;
 80008ee:	2000      	movs	r0, #0
 80008f0:	4413      	add	r3, r2
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008f2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80008f6:	f042 0201 	orr.w	r2, r2, #1
 80008fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80008fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                           pHeader->IDE |
 8000900:	432b      	orrs	r3, r5
 8000902:	684d      	ldr	r5, [r1, #4]
 8000904:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 8000908:	e7d2      	b.n	80008b0 <HAL_CAN_AddTxMessage+0x44>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800090a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800090c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000910:	e7c0      	b.n	8000894 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000912:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000918:	e7bc      	b.n	8000894 <HAL_CAN_AddTxMessage+0x28>

0800091a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 800091a:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800091e:	3b01      	subs	r3, #1
 8000920:	2b01      	cmp	r3, #1
 8000922:	d80c      	bhi.n	800093e <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000924:	6803      	ldr	r3, [r0, #0]
 8000926:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000928:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800092a:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800092c:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800092e:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 8000932:	bf48      	it	mi
 8000934:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	d502      	bpl.n	8000940 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 800093a:	3001      	adds	r0, #1
 800093c:	4770      	bx	lr
  uint32_t freelevel = 0U;
 800093e:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8000940:	4770      	bx	lr

08000942 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000942:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000944:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000948:	3c01      	subs	r4, #1
 800094a:	2c01      	cmp	r4, #1
 800094c:	d877      	bhi.n	8000a3e <HAL_CAN_GetRxMessage+0xfc>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800094e:	6805      	ldr	r5, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000950:	b941      	cbnz	r1, 8000964 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000952:	68ec      	ldr	r4, [r5, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000954:	07a4      	lsls	r4, r4, #30
 8000956:	d107      	bne.n	8000968 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000958:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800095a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800095e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000960:	2001      	movs	r0, #1
 8000962:	e062      	b.n	8000a2a <HAL_CAN_GetRxMessage+0xe8>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000964:	692c      	ldr	r4, [r5, #16]
 8000966:	e7f5      	b.n	8000954 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000968:	f101 041b 	add.w	r4, r1, #27
 800096c:	0126      	lsls	r6, r4, #4
 800096e:	59ad      	ldr	r5, [r5, r6]
 8000970:	f005 0504 	and.w	r5, r5, #4
 8000974:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000976:	6807      	ldr	r7, [r0, #0]
 8000978:	2d00      	cmp	r5, #0
 800097a:	d157      	bne.n	8000a2c <HAL_CAN_GetRxMessage+0xea>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800097c:	59bd      	ldr	r5, [r7, r6]
 800097e:	0d6d      	lsrs	r5, r5, #21
 8000980:	6015      	str	r5, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000982:	6805      	ldr	r5, [r0, #0]
 8000984:	0124      	lsls	r4, r4, #4
 8000986:	592d      	ldr	r5, [r5, r4]
 8000988:	f005 0502 	and.w	r5, r5, #2
 800098c:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800098e:	6805      	ldr	r5, [r0, #0]
 8000990:	4425      	add	r5, r4
 8000992:	686d      	ldr	r5, [r5, #4]
 8000994:	f005 050f 	and.w	r5, r5, #15
 8000998:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800099a:	6805      	ldr	r5, [r0, #0]
 800099c:	4425      	add	r5, r4
 800099e:	686d      	ldr	r5, [r5, #4]
 80009a0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80009a4:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80009a6:	6805      	ldr	r5, [r0, #0]
 80009a8:	442c      	add	r4, r5
 80009aa:	6864      	ldr	r4, [r4, #4]
 80009ac:	0c24      	lsrs	r4, r4, #16
 80009ae:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80009b0:	6802      	ldr	r2, [r0, #0]
 80009b2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80009b6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80009ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80009bc:	6802      	ldr	r2, [r0, #0]
 80009be:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80009c2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80009c6:	0a12      	lsrs	r2, r2, #8
 80009c8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80009ca:	6802      	ldr	r2, [r0, #0]
 80009cc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80009d0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80009d4:	0c12      	lsrs	r2, r2, #16
 80009d6:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80009d8:	6802      	ldr	r2, [r0, #0]
 80009da:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80009de:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80009e2:	0e12      	lsrs	r2, r2, #24
 80009e4:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80009e6:	6802      	ldr	r2, [r0, #0]
 80009e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80009ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80009f0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80009f2:	6802      	ldr	r2, [r0, #0]
 80009f4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80009f8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80009fc:	0a12      	lsrs	r2, r2, #8
 80009fe:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a00:	6802      	ldr	r2, [r0, #0]
 8000a02:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000a06:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a0a:	0c12      	lsrs	r2, r2, #16
 8000a0c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a0e:	6802      	ldr	r2, [r0, #0]
 8000a10:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000a14:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a18:	0e12      	lsrs	r2, r2, #24
 8000a1a:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a1c:	6803      	ldr	r3, [r0, #0]
 8000a1e:	b949      	cbnz	r1, 8000a34 <HAL_CAN_GetRxMessage+0xf2>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000a20:	68da      	ldr	r2, [r3, #12]
 8000a22:	f042 0220 	orr.w	r2, r2, #32
 8000a26:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000a28:	2000      	movs	r0, #0
  }
}
 8000a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000a2c:	59bd      	ldr	r5, [r7, r6]
 8000a2e:	08ed      	lsrs	r5, r5, #3
 8000a30:	6055      	str	r5, [r2, #4]
 8000a32:	e7a6      	b.n	8000982 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a34:	691a      	ldr	r2, [r3, #16]
 8000a36:	f042 0220 	orr.w	r2, r2, #32
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	e7f4      	b.n	8000a28 <HAL_CAN_GetRxMessage+0xe6>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a44:	e78b      	b.n	800095e <HAL_CAN_GetRxMessage+0x1c>

08000a46 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a46:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d805      	bhi.n	8000a5c <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000a50:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000a52:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000a54:	6953      	ldr	r3, [r2, #20]
 8000a56:	4319      	orrs	r1, r3
 8000a58:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000a5a:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a62:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000a64:	2001      	movs	r0, #1
  }
}
 8000a66:	4770      	bx	lr

08000a68 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000a68:	4770      	bx	lr

08000a6a <HAL_CAN_TxMailbox1CompleteCallback>:
 8000a6a:	4770      	bx	lr

08000a6c <HAL_CAN_TxMailbox2CompleteCallback>:
 8000a6c:	4770      	bx	lr

08000a6e <HAL_CAN_TxMailbox0AbortCallback>:
 8000a6e:	4770      	bx	lr

08000a70 <HAL_CAN_TxMailbox1AbortCallback>:
 8000a70:	4770      	bx	lr

08000a72 <HAL_CAN_TxMailbox2AbortCallback>:
 8000a72:	4770      	bx	lr

08000a74 <HAL_CAN_RxFifo0FullCallback>:
 8000a74:	4770      	bx	lr

08000a76 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000a76:	4770      	bx	lr

08000a78 <HAL_CAN_RxFifo1FullCallback>:
 8000a78:	4770      	bx	lr

08000a7a <HAL_CAN_SleepCallback>:
 8000a7a:	4770      	bx	lr

08000a7c <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000a7c:	4770      	bx	lr

08000a7e <HAL_CAN_ErrorCallback>:
 8000a7e:	4770      	bx	lr

08000a80 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000a84:	6803      	ldr	r3, [r0, #0]
{
 8000a86:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000a88:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000a8a:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000a8e:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000a92:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000a94:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000a98:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000a9c:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000aa0:	d022      	beq.n	8000ae8 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000aa2:	f017 0401 	ands.w	r4, r7, #1
 8000aa6:	d007      	beq.n	8000ab8 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000aac:	07bb      	lsls	r3, r7, #30
 8000aae:	f140 80a6 	bpl.w	8000bfe <HAL_CAN_IRQHandler+0x17e>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000ab2:	f7ff ffd9 	bl	8000a68 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ab6:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000ab8:	05f8      	lsls	r0, r7, #23
 8000aba:	d509      	bpl.n	8000ad0 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac0:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000ac2:	05b9      	lsls	r1, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000ac4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000ac6:	f140 80a8 	bpl.w	8000c1a <HAL_CAN_IRQHandler+0x19a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000aca:	4628      	mov	r0, r5
 8000acc:	f7ff ffcd 	bl	8000a6a <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ad0:	03f8      	lsls	r0, r7, #15
 8000ad2:	d509      	bpl.n	8000ae8 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ad4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ad8:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ada:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000adc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ade:	f140 80aa 	bpl.w	8000c36 <HAL_CAN_IRQHandler+0x1b6>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f7ff ffc2 	bl	8000a6c <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ae8:	0737      	lsls	r7, r6, #28
 8000aea:	d507      	bpl.n	8000afc <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000aec:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000af0:	bf1f      	itttt	ne
 8000af2:	2210      	movne	r2, #16
 8000af4:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000af6:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000afa:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000afc:	0770      	lsls	r0, r6, #29
 8000afe:	d508      	bpl.n	8000b12 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000b00:	f01b 0f08 	tst.w	fp, #8
 8000b04:	d005      	beq.n	8000b12 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b06:	2208      	movs	r2, #8
 8000b08:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b0a:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b0c:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b0e:	f7ff ffb1 	bl	8000a74 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000b12:	07b1      	lsls	r1, r6, #30
 8000b14:	d506      	bpl.n	8000b24 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	079a      	lsls	r2, r3, #30
 8000b1c:	d002      	beq.n	8000b24 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000b1e:	4628      	mov	r0, r5
 8000b20:	f7ff fb7e 	bl	8000220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000b24:	0673      	lsls	r3, r6, #25
 8000b26:	d507      	bpl.n	8000b38 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000b28:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b2c:	bf1f      	itttt	ne
 8000b2e:	2210      	movne	r2, #16
 8000b30:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000b32:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b36:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000b38:	06b7      	lsls	r7, r6, #26
 8000b3a:	d508      	bpl.n	8000b4e <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000b3c:	f01a 0f08 	tst.w	sl, #8
 8000b40:	d005      	beq.n	8000b4e <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000b42:	2208      	movs	r2, #8
 8000b44:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000b46:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000b48:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000b4a:	f7ff ff95 	bl	8000a78 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000b4e:	06f0      	lsls	r0, r6, #27
 8000b50:	d506      	bpl.n	8000b60 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000b52:	682b      	ldr	r3, [r5, #0]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	0799      	lsls	r1, r3, #30
 8000b58:	d002      	beq.n	8000b60 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f7ff ff8b 	bl	8000a76 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000b60:	03b2      	lsls	r2, r6, #14
 8000b62:	d508      	bpl.n	8000b76 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000b64:	f019 0f10 	tst.w	r9, #16
 8000b68:	d005      	beq.n	8000b76 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000b6e:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b70:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000b72:	f7ff ff82 	bl	8000a7a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000b76:	03f3      	lsls	r3, r6, #15
 8000b78:	d508      	bpl.n	8000b8c <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b7a:	f019 0f08 	tst.w	r9, #8
 8000b7e:	d005      	beq.n	8000b8c <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b80:	2208      	movs	r2, #8
 8000b82:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b84:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b86:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b88:	f7ff ff78 	bl	8000a7c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b8c:	0437      	lsls	r7, r6, #16
 8000b8e:	d52d      	bpl.n	8000bec <HAL_CAN_IRQHandler+0x16c>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b90:	f019 0f04 	tst.w	r9, #4
 8000b94:	d027      	beq.n	8000be6 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b96:	05f0      	lsls	r0, r6, #23
 8000b98:	d504      	bpl.n	8000ba4 <HAL_CAN_IRQHandler+0x124>
 8000b9a:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b9e:	bf18      	it	ne
 8000ba0:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ba4:	05b1      	lsls	r1, r6, #22
 8000ba6:	d504      	bpl.n	8000bb2 <HAL_CAN_IRQHandler+0x132>
 8000ba8:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000bac:	bf18      	it	ne
 8000bae:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bb2:	0572      	lsls	r2, r6, #21
 8000bb4:	d504      	bpl.n	8000bc0 <HAL_CAN_IRQHandler+0x140>
 8000bb6:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000bba:	bf18      	it	ne
 8000bbc:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bc0:	0533      	lsls	r3, r6, #20
 8000bc2:	d510      	bpl.n	8000be6 <HAL_CAN_IRQHandler+0x166>
 8000bc4:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000bc8:	d00d      	beq.n	8000be6 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000bca:	2b40      	cmp	r3, #64	; 0x40
 8000bcc:	d051      	beq.n	8000c72 <HAL_CAN_IRQHandler+0x1f2>
 8000bce:	d840      	bhi.n	8000c52 <HAL_CAN_IRQHandler+0x1d2>
 8000bd0:	2b20      	cmp	r3, #32
 8000bd2:	d048      	beq.n	8000c66 <HAL_CAN_IRQHandler+0x1e6>
 8000bd4:	2b30      	cmp	r3, #48	; 0x30
 8000bd6:	d049      	beq.n	8000c6c <HAL_CAN_IRQHandler+0x1ec>
 8000bd8:	2b10      	cmp	r3, #16
 8000bda:	d041      	beq.n	8000c60 <HAL_CAN_IRQHandler+0x1e0>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000bdc:	682a      	ldr	r2, [r5, #0]
 8000bde:	6993      	ldr	r3, [r2, #24]
 8000be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000be4:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000be6:	2204      	movs	r2, #4
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000bec:	b12c      	cbz	r4, 8000bfa <HAL_CAN_IRQHandler+0x17a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000bf0:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000bf6:	f7ff ff42 	bl	8000a7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000bfe:	077c      	lsls	r4, r7, #29
 8000c00:	d405      	bmi.n	8000c0e <HAL_CAN_IRQHandler+0x18e>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c02:	f017 0408 	ands.w	r4, r7, #8
 8000c06:	d105      	bne.n	8000c14 <HAL_CAN_IRQHandler+0x194>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c08:	f7ff ff31 	bl	8000a6e <HAL_CAN_TxMailbox0AbortCallback>
 8000c0c:	e754      	b.n	8000ab8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c0e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000c12:	e751      	b.n	8000ab8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c14:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000c18:	e74e      	b.n	8000ab8 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000c1a:	057a      	lsls	r2, r7, #21
 8000c1c:	d502      	bpl.n	8000c24 <HAL_CAN_IRQHandler+0x1a4>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c1e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000c22:	e755      	b.n	8000ad0 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000c24:	053b      	lsls	r3, r7, #20
 8000c26:	d502      	bpl.n	8000c2e <HAL_CAN_IRQHandler+0x1ae>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000c28:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000c2c:	e750      	b.n	8000ad0 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000c2e:	4628      	mov	r0, r5
 8000c30:	f7ff ff1e 	bl	8000a70 <HAL_CAN_TxMailbox1AbortCallback>
 8000c34:	e74c      	b.n	8000ad0 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000c36:	037a      	lsls	r2, r7, #13
 8000c38:	d502      	bpl.n	8000c40 <HAL_CAN_IRQHandler+0x1c0>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000c3a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000c3e:	e753      	b.n	8000ae8 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000c40:	033b      	lsls	r3, r7, #12
 8000c42:	d502      	bpl.n	8000c4a <HAL_CAN_IRQHandler+0x1ca>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000c44:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000c48:	e74e      	b.n	8000ae8 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	f7ff ff11 	bl	8000a72 <HAL_CAN_TxMailbox2AbortCallback>
 8000c50:	e74a      	b.n	8000ae8 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000c52:	2b50      	cmp	r3, #80	; 0x50
 8000c54:	d010      	beq.n	8000c78 <HAL_CAN_IRQHandler+0x1f8>
 8000c56:	2b60      	cmp	r3, #96	; 0x60
 8000c58:	d1c0      	bne.n	8000bdc <HAL_CAN_IRQHandler+0x15c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c5a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000c5e:	e7bd      	b.n	8000bdc <HAL_CAN_IRQHandler+0x15c>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c60:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000c64:	e7ba      	b.n	8000bdc <HAL_CAN_IRQHandler+0x15c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000c66:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000c6a:	e7b7      	b.n	8000bdc <HAL_CAN_IRQHandler+0x15c>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c6c:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000c70:	e7b4      	b.n	8000bdc <HAL_CAN_IRQHandler+0x15c>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c72:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000c76:	e7b1      	b.n	8000bdc <HAL_CAN_IRQHandler+0x15c>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c78:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000c7c:	e7ae      	b.n	8000bdc <HAL_CAN_IRQHandler+0x15c>
	...

08000c80 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c82:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c8e:	0412      	lsls	r2, r2, #16
 8000c90:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c9c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca4:	b530      	push	{r4, r5, lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_NVIC_SetPriority+0x5c>)
 8000ca8:	68dc      	ldr	r4, [r3, #12]
 8000caa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	bf28      	it	cs
 8000cb8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc0:	bf98      	it	ls
 8000cc2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc8:	bf88      	it	hi
 8000cca:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	ea21 0303 	bic.w	r3, r1, r3
 8000cd0:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd2:	fa05 f404 	lsl.w	r4, r5, r4
 8000cd6:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000cda:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	bfac      	ite	ge
 8000ce2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	4a07      	ldrlt	r2, [pc, #28]	; (8000d04 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	bfab      	itete	ge
 8000cf0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000cfe:	bd30      	pop	{r4, r5, pc}
 8000d00:	e000ed00 	.word	0xe000ed00
 8000d04:	e000ed14 	.word	0xe000ed14

08000d08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	db08      	blt.n	8000d1e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	0942      	lsrs	r2, r0, #5
 8000d10:	f000 001f 	and.w	r0, r0, #31
 8000d14:	fa03 f000 	lsl.w	r0, r3, r0
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <HAL_NVIC_EnableIRQ+0x18>)
 8000d1a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	3801      	subs	r0, #1
 8000d26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d2a:	d20b      	bcs.n	8000d44 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	21f0      	movs	r1, #240	; 0xf0
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d34:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d40:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d42:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d44:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <HAL_GPIO_Init>:
{
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d4c:	2300      	movs	r3, #0
{
 8000d4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
 8000d52:	461d      	mov	r5, r3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d54:	4e79      	ldr	r6, [pc, #484]	; (8000f3c <HAL_GPIO_Init+0x1f0>)
 8000d56:	4a7a      	ldr	r2, [pc, #488]	; (8000f40 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8000d58:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8000f44 <HAL_GPIO_Init+0x1f8>
 8000d5c:	4f7a      	ldr	r7, [pc, #488]	; (8000f48 <HAL_GPIO_Init+0x1fc>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	f8d1 e000 	ldr.w	lr, [r1]
 8000d62:	fa3e f405 	lsrs.w	r4, lr, r5
 8000d66:	d102      	bne.n	8000d6e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000d68:	b003      	add	sp, #12
 8000d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000d6e:	f04f 0801 	mov.w	r8, #1
 8000d72:	fa08 f805 	lsl.w	r8, r8, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d76:	ea0e 0408 	and.w	r4, lr, r8
    if (iocurrent == ioposition)
 8000d7a:	ea38 0e0e 	bics.w	lr, r8, lr
 8000d7e:	f040 80a1 	bne.w	8000ec4 <HAL_GPIO_Init+0x178>
      switch (GPIO_Init->Mode)
 8000d82:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8000d86:	f1be 0f03 	cmp.w	lr, #3
 8000d8a:	d809      	bhi.n	8000da0 <HAL_GPIO_Init+0x54>
 8000d8c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8000d90:	f1be 0f02 	cmp.w	lr, #2
 8000d94:	f200 80aa 	bhi.w	8000eec <HAL_GPIO_Init+0x1a0>
 8000d98:	e8df f00e 	tbb	[pc, lr]
 8000d9c:	bdb8      	.short	0xbdb8
 8000d9e:	c3          	.byte	0xc3
 8000d9f:	00          	.byte	0x00
 8000da0:	f1be 0f12 	cmp.w	lr, #18
 8000da4:	f000 80ba 	beq.w	8000f1c <HAL_GPIO_Init+0x1d0>
 8000da8:	f200 808e 	bhi.w	8000ec8 <HAL_GPIO_Init+0x17c>
 8000dac:	f1be 0f11 	cmp.w	lr, #17
 8000db0:	f000 80ae 	beq.w	8000f10 <HAL_GPIO_Init+0x1c4>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db4:	2cff      	cmp	r4, #255	; 0xff
 8000db6:	bf98      	it	ls
 8000db8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dba:	f04f 080f 	mov.w	r8, #15
 8000dbe:	ea4f 0e85 	mov.w	lr, r5, lsl #2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc2:	bf84      	itt	hi
 8000dc4:	f100 0a04 	addhi.w	sl, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc8:	f1ae 0e20 	subhi.w	lr, lr, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dcc:	f8da 9000 	ldr.w	r9, [sl]
 8000dd0:	fa08 fb0e 	lsl.w	fp, r8, lr
 8000dd4:	ea29 090b 	bic.w	r9, r9, fp
 8000dd8:	fa03 fe0e 	lsl.w	lr, r3, lr
 8000ddc:	ea49 090e 	orr.w	r9, r9, lr
 8000de0:	f8ca 9000 	str.w	r9, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de4:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8000de8:	f01e 5f80 	tst.w	lr, #268435456	; 0x10000000
 8000dec:	d06a      	beq.n	8000ec4 <HAL_GPIO_Init+0x178>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dee:	f8d6 e018 	ldr.w	lr, [r6, #24]
 8000df2:	f025 0903 	bic.w	r9, r5, #3
 8000df6:	f04e 0e01 	orr.w	lr, lr, #1
 8000dfa:	f8c6 e018 	str.w	lr, [r6, #24]
 8000dfe:	f8d6 e018 	ldr.w	lr, [r6, #24]
 8000e02:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000e06:	f00e 0e01 	and.w	lr, lr, #1
 8000e0a:	f8cd e004 	str.w	lr, [sp, #4]
 8000e0e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e12:	f005 0a03 	and.w	sl, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e16:	f8dd e004 	ldr.w	lr, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e1a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000e1e:	f8d9 e008 	ldr.w	lr, [r9, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e22:	fa08 f80a 	lsl.w	r8, r8, sl
 8000e26:	ea2e 0808 	bic.w	r8, lr, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e2a:	f8df e120 	ldr.w	lr, [pc, #288]	; 8000f4c <HAL_GPIO_Init+0x200>
 8000e2e:	4570      	cmp	r0, lr
 8000e30:	d07b      	beq.n	8000f2a <HAL_GPIO_Init+0x1de>
 8000e32:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000e36:	4570      	cmp	r0, lr
 8000e38:	d07a      	beq.n	8000f30 <HAL_GPIO_Init+0x1e4>
 8000e3a:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000e3e:	4570      	cmp	r0, lr
 8000e40:	d079      	beq.n	8000f36 <HAL_GPIO_Init+0x1ea>
 8000e42:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000e46:	4570      	cmp	r0, lr
 8000e48:	bf0c      	ite	eq
 8000e4a:	f04f 0e03 	moveq.w	lr, #3
 8000e4e:	f04f 0e04 	movne.w	lr, #4
 8000e52:	fa0e fe0a 	lsl.w	lr, lr, sl
 8000e56:	ea4e 0e08 	orr.w	lr, lr, r8
        AFIO->EXTICR[position >> 2u] = temp;
 8000e5a:	f8c9 e008 	str.w	lr, [r9, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8000e62:	f41e 3f80 	tst.w	lr, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000e66:	f8d2 e000 	ldr.w	lr, [r2]
 8000e6a:	bf14      	ite	ne
 8000e6c:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e70:	ea2e 0e04 	biceq.w	lr, lr, r4
 8000e74:	f8c2 e000 	str.w	lr, [r2]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e78:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8000e7c:	f41e 3f00 	tst.w	lr, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000e80:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8000e84:	bf14      	ite	ne
 8000e86:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e8a:	ea2e 0e04 	biceq.w	lr, lr, r4
 8000e8e:	f8c2 e004 	str.w	lr, [r2, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e92:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8000e96:	f41e 1f80 	tst.w	lr, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e9a:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8000e9e:	bf14      	ite	ne
 8000ea0:	ea4e 0e04 	orrne.w	lr, lr, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ea4:	ea2e 0e04 	biceq.w	lr, lr, r4
 8000ea8:	f8c2 e008 	str.w	lr, [r2, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eac:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8000eb0:	f41e 1f00 	tst.w	lr, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eb4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8000eb8:	bf14      	ite	ne
 8000eba:	ea4e 0404 	orrne.w	r4, lr, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ebe:	ea2e 0404 	biceq.w	r4, lr, r4
 8000ec2:	60d4      	str	r4, [r2, #12]
	position++;
 8000ec4:	3501      	adds	r5, #1
 8000ec6:	e74a      	b.n	8000d5e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000ec8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8000f50 <HAL_GPIO_Init+0x204>
 8000ecc:	45ce      	cmp	lr, r9
 8000ece:	d00d      	beq.n	8000eec <HAL_GPIO_Init+0x1a0>
 8000ed0:	d818      	bhi.n	8000f04 <HAL_GPIO_Init+0x1b8>
 8000ed2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000ed6:	45ce      	cmp	lr, r9
 8000ed8:	d008      	beq.n	8000eec <HAL_GPIO_Init+0x1a0>
 8000eda:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000ede:	45ce      	cmp	lr, r9
 8000ee0:	d004      	beq.n	8000eec <HAL_GPIO_Init+0x1a0>
 8000ee2:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000ee6:	45ce      	cmp	lr, r9
 8000ee8:	f47f af64 	bne.w	8000db4 <HAL_GPIO_Init+0x68>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eec:	688b      	ldr	r3, [r1, #8]
 8000eee:	b1d3      	cbz	r3, 8000f26 <HAL_GPIO_Init+0x1da>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef0:	2b01      	cmp	r3, #1
            GPIOx->BSRR = ioposition;
 8000ef2:	bf08      	it	eq
 8000ef4:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef8:	f04f 0308 	mov.w	r3, #8
            GPIOx->BRR = ioposition;
 8000efc:	bf18      	it	ne
 8000efe:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000f02:	e757      	b.n	8000db4 <HAL_GPIO_Init+0x68>
      switch (GPIO_Init->Mode)
 8000f04:	45e6      	cmp	lr, ip
 8000f06:	d0f1      	beq.n	8000eec <HAL_GPIO_Init+0x1a0>
 8000f08:	45be      	cmp	lr, r7
 8000f0a:	e7ed      	b.n	8000ee8 <HAL_GPIO_Init+0x19c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f0c:	68cb      	ldr	r3, [r1, #12]
          break;
 8000f0e:	e751      	b.n	8000db4 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f10:	68cb      	ldr	r3, [r1, #12]
 8000f12:	3304      	adds	r3, #4
          break;
 8000f14:	e74e      	b.n	8000db4 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f16:	68cb      	ldr	r3, [r1, #12]
 8000f18:	3308      	adds	r3, #8
          break;
 8000f1a:	e74b      	b.n	8000db4 <HAL_GPIO_Init+0x68>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f1c:	68cb      	ldr	r3, [r1, #12]
 8000f1e:	330c      	adds	r3, #12
          break;
 8000f20:	e748      	b.n	8000db4 <HAL_GPIO_Init+0x68>
      switch (GPIO_Init->Mode)
 8000f22:	2300      	movs	r3, #0
 8000f24:	e746      	b.n	8000db4 <HAL_GPIO_Init+0x68>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f26:	2304      	movs	r3, #4
 8000f28:	e744      	b.n	8000db4 <HAL_GPIO_Init+0x68>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f2a:	f04f 0e00 	mov.w	lr, #0
 8000f2e:	e790      	b.n	8000e52 <HAL_GPIO_Init+0x106>
 8000f30:	f04f 0e01 	mov.w	lr, #1
 8000f34:	e78d      	b.n	8000e52 <HAL_GPIO_Init+0x106>
 8000f36:	f04f 0e02 	mov.w	lr, #2
 8000f3a:	e78a      	b.n	8000e52 <HAL_GPIO_Init+0x106>
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010400 	.word	0x40010400
 8000f44:	10310000 	.word	0x10310000
 8000f48:	10320000 	.word	0x10320000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	10220000 	.word	0x10220000

08000f54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f54:	b10a      	cbz	r2, 8000f5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f56:	6101      	str	r1, [r0, #16]
  }
}
 8000f58:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f5a:	0409      	lsls	r1, r1, #16
 8000f5c:	e7fb      	b.n	8000f56 <HAL_GPIO_WritePin+0x2>

08000f5e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f5e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f60:	ea01 0203 	and.w	r2, r1, r3
 8000f64:	ea21 0103 	bic.w	r1, r1, r3
 8000f68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f6c:	6101      	str	r1, [r0, #16]
}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f74:	4604      	mov	r4, r0
 8000f76:	b338      	cbz	r0, 8000fc8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f78:	6803      	ldr	r3, [r0, #0]
 8000f7a:	07db      	lsls	r3, r3, #31
 8000f7c:	d410      	bmi.n	8000fa0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	079f      	lsls	r7, r3, #30
 8000f82:	d459      	bmi.n	8001038 <HAL_RCC_OscConfig+0xc8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	0719      	lsls	r1, r3, #28
 8000f88:	f100 8090 	bmi.w	80010ac <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	075a      	lsls	r2, r3, #29
 8000f90:	f100 80bc 	bmi.w	800110c <HAL_RCC_OscConfig+0x19c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f94:	69e0      	ldr	r0, [r4, #28]
 8000f96:	2800      	cmp	r0, #0
 8000f98:	f040 8124 	bne.w	80011e4 <HAL_RCC_OscConfig+0x274>
        }
      }
    }
  }

  return HAL_OK;
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	e02b      	b.n	8000ff8 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa0:	4d8c      	ldr	r5, [pc, #560]	; (80011d4 <HAL_RCC_OscConfig+0x264>)
 8000fa2:	686b      	ldr	r3, [r5, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d007      	beq.n	8000fbc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fac:	686b      	ldr	r3, [r5, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d10a      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
 8000fb6:	686b      	ldr	r3, [r5, #4]
 8000fb8:	03de      	lsls	r6, r3, #15
 8000fba:	d507      	bpl.n	8000fcc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	039d      	lsls	r5, r3, #14
 8000fc0:	d5dd      	bpl.n	8000f7e <HAL_RCC_OscConfig+0xe>
 8000fc2:	6863      	ldr	r3, [r4, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1da      	bne.n	8000f7e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
 8000fca:	e015      	b.n	8000ff8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	6863      	ldr	r3, [r4, #4]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd2:	d114      	bne.n	8000ffe <HAL_RCC_OscConfig+0x8e>
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fda:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fdc:	6863      	ldr	r3, [r4, #4]
 8000fde:	b1fb      	cbz	r3, 8001020 <HAL_RCC_OscConfig+0xb0>
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fb06 	bl	80005f0 <HAL_GetTick>
 8000fe4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	0398      	lsls	r0, r3, #14
 8000fea:	d4c8      	bmi.n	8000f7e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff fb00 	bl	80005f0 <HAL_GetTick>
 8000ff0:	1b80      	subs	r0, r0, r6
 8000ff2:	2864      	cmp	r0, #100	; 0x64
 8000ff4:	d9f7      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000ff6:	2003      	movs	r0, #3
}
 8000ff8:	b002      	add	sp, #8
 8000ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffe:	b93b      	cbnz	r3, 8001010 <HAL_RCC_OscConfig+0xa0>
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	e7e4      	b.n	8000fda <HAL_RCC_OscConfig+0x6a>
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	d1f4      	bne.n	8001002 <HAL_RCC_OscConfig+0x92>
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	602b      	str	r3, [r5, #0]
 800101e:	e7d9      	b.n	8000fd4 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
 8001020:	f7ff fae6 	bl	80005f0 <HAL_GetTick>
 8001024:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	682b      	ldr	r3, [r5, #0]
 8001028:	0399      	lsls	r1, r3, #14
 800102a:	d5a8      	bpl.n	8000f7e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fae0 	bl	80005f0 <HAL_GetTick>
 8001030:	1b80      	subs	r0, r0, r6
 8001032:	2864      	cmp	r0, #100	; 0x64
 8001034:	d9f7      	bls.n	8001026 <HAL_RCC_OscConfig+0xb6>
 8001036:	e7de      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001038:	4d66      	ldr	r5, [pc, #408]	; (80011d4 <HAL_RCC_OscConfig+0x264>)
 800103a:	686b      	ldr	r3, [r5, #4]
 800103c:	f013 0f0c 	tst.w	r3, #12
 8001040:	d007      	beq.n	8001052 <HAL_RCC_OscConfig+0xe2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001042:	686b      	ldr	r3, [r5, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d110      	bne.n	800106e <HAL_RCC_OscConfig+0xfe>
 800104c:	686b      	ldr	r3, [r5, #4]
 800104e:	03da      	lsls	r2, r3, #15
 8001050:	d40d      	bmi.n	800106e <HAL_RCC_OscConfig+0xfe>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	682b      	ldr	r3, [r5, #0]
 8001054:	079b      	lsls	r3, r3, #30
 8001056:	d502      	bpl.n	800105e <HAL_RCC_OscConfig+0xee>
 8001058:	6923      	ldr	r3, [r4, #16]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d1b4      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105e:	682b      	ldr	r3, [r5, #0]
 8001060:	6962      	ldr	r2, [r4, #20]
 8001062:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001066:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800106a:	602b      	str	r3, [r5, #0]
 800106c:	e78a      	b.n	8000f84 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106e:	6922      	ldr	r2, [r4, #16]
 8001070:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <HAL_RCC_OscConfig+0x268>)
 8001072:	b16a      	cbz	r2, 8001090 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_ENABLE();
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001078:	f7ff faba 	bl	80005f0 <HAL_GetTick>
 800107c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	682b      	ldr	r3, [r5, #0]
 8001080:	079f      	lsls	r7, r3, #30
 8001082:	d4ec      	bmi.n	800105e <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fab4 	bl	80005f0 <HAL_GetTick>
 8001088:	1b80      	subs	r0, r0, r6
 800108a:	2802      	cmp	r0, #2
 800108c:	d9f7      	bls.n	800107e <HAL_RCC_OscConfig+0x10e>
 800108e:	e7b2      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8001090:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001092:	f7ff faad 	bl	80005f0 <HAL_GetTick>
 8001096:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	0798      	lsls	r0, r3, #30
 800109c:	f57f af72 	bpl.w	8000f84 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff faa6 	bl	80005f0 <HAL_GetTick>
 80010a4:	1b80      	subs	r0, r0, r6
 80010a6:	2802      	cmp	r0, #2
 80010a8:	d9f6      	bls.n	8001098 <HAL_RCC_OscConfig+0x128>
 80010aa:	e7a4      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ac:	69a2      	ldr	r2, [r4, #24]
 80010ae:	4e49      	ldr	r6, [pc, #292]	; (80011d4 <HAL_RCC_OscConfig+0x264>)
 80010b0:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <HAL_RCC_OscConfig+0x268>)
 80010b2:	b1e2      	cbz	r2, 80010ee <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80010b4:	2201      	movs	r2, #1
 80010b6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80010ba:	f7ff fa99 	bl	80005f0 <HAL_GetTick>
 80010be:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80010c2:	079b      	lsls	r3, r3, #30
 80010c4:	d50d      	bpl.n	80010e2 <HAL_RCC_OscConfig+0x172>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80010c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010ca:	4b44      	ldr	r3, [pc, #272]	; (80011dc <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80010d2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80010d4:	bf00      	nop
  }
  while (Delay --);
 80010d6:	9b01      	ldr	r3, [sp, #4]
 80010d8:	1e5a      	subs	r2, r3, #1
 80010da:	9201      	str	r2, [sp, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f9      	bne.n	80010d4 <HAL_RCC_OscConfig+0x164>
 80010e0:	e754      	b.n	8000f8c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fa85 	bl	80005f0 <HAL_GetTick>
 80010e6:	1b40      	subs	r0, r0, r5
 80010e8:	2802      	cmp	r0, #2
 80010ea:	d9e9      	bls.n	80010c0 <HAL_RCC_OscConfig+0x150>
 80010ec:	e783      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80010ee:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80010f2:	f7ff fa7d 	bl	80005f0 <HAL_GetTick>
 80010f6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80010fa:	079f      	lsls	r7, r3, #30
 80010fc:	f57f af46 	bpl.w	8000f8c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff fa76 	bl	80005f0 <HAL_GetTick>
 8001104:	1b40      	subs	r0, r0, r5
 8001106:	2802      	cmp	r0, #2
 8001108:	d9f6      	bls.n	80010f8 <HAL_RCC_OscConfig+0x188>
 800110a:	e774      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110c:	4d31      	ldr	r5, [pc, #196]	; (80011d4 <HAL_RCC_OscConfig+0x264>)
 800110e:	69eb      	ldr	r3, [r5, #28]
 8001110:	00d8      	lsls	r0, r3, #3
 8001112:	d427      	bmi.n	8001164 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8001114:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	69eb      	ldr	r3, [r5, #28]
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61eb      	str	r3, [r5, #28]
 800111e:	69eb      	ldr	r3, [r5, #28]
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	4e2d      	ldr	r6, [pc, #180]	; (80011e0 <HAL_RCC_OscConfig+0x270>)
 800112a:	6833      	ldr	r3, [r6, #0]
 800112c:	05d9      	lsls	r1, r3, #23
 800112e:	d51b      	bpl.n	8001168 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001130:	68e3      	ldr	r3, [r4, #12]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d129      	bne.n	800118a <HAL_RCC_OscConfig+0x21a>
 8001136:	6a2b      	ldr	r3, [r5, #32]
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	622b      	str	r3, [r5, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800113e:	68e3      	ldr	r3, [r4, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d038      	beq.n	80011b6 <HAL_RCC_OscConfig+0x246>
      tickstart = HAL_GetTick();
 8001144:	f7ff fa54 	bl	80005f0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001148:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800114c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114e:	6a2b      	ldr	r3, [r5, #32]
 8001150:	079b      	lsls	r3, r3, #30
 8001152:	d52a      	bpl.n	80011aa <HAL_RCC_OscConfig+0x23a>
    if (pwrclkchanged == SET)
 8001154:	2f00      	cmp	r7, #0
 8001156:	f43f af1d 	beq.w	8000f94 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800115a:	69eb      	ldr	r3, [r5, #28]
 800115c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001160:	61eb      	str	r3, [r5, #28]
 8001162:	e717      	b.n	8000f94 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001164:	2700      	movs	r7, #0
 8001166:	e7df      	b.n	8001128 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001168:	6833      	ldr	r3, [r6, #0]
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001170:	f7ff fa3e 	bl	80005f0 <HAL_GetTick>
 8001174:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001176:	6833      	ldr	r3, [r6, #0]
 8001178:	05da      	lsls	r2, r3, #23
 800117a:	d4d9      	bmi.n	8001130 <HAL_RCC_OscConfig+0x1c0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117c:	f7ff fa38 	bl	80005f0 <HAL_GetTick>
 8001180:	eba0 0008 	sub.w	r0, r0, r8
 8001184:	2864      	cmp	r0, #100	; 0x64
 8001186:	d9f6      	bls.n	8001176 <HAL_RCC_OscConfig+0x206>
 8001188:	e735      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118a:	b93b      	cbnz	r3, 800119c <HAL_RCC_OscConfig+0x22c>
 800118c:	6a2b      	ldr	r3, [r5, #32]
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	622b      	str	r3, [r5, #32]
 8001194:	6a2b      	ldr	r3, [r5, #32]
 8001196:	f023 0304 	bic.w	r3, r3, #4
 800119a:	e7cf      	b.n	800113c <HAL_RCC_OscConfig+0x1cc>
 800119c:	2b05      	cmp	r3, #5
 800119e:	6a2b      	ldr	r3, [r5, #32]
 80011a0:	d1f5      	bne.n	800118e <HAL_RCC_OscConfig+0x21e>
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	622b      	str	r3, [r5, #32]
 80011a8:	e7c5      	b.n	8001136 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fa21 	bl	80005f0 <HAL_GetTick>
 80011ae:	1b80      	subs	r0, r0, r6
 80011b0:	4540      	cmp	r0, r8
 80011b2:	d9cc      	bls.n	800114e <HAL_RCC_OscConfig+0x1de>
 80011b4:	e71f      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa1b 	bl	80005f0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c0:	6a2b      	ldr	r3, [r5, #32]
 80011c2:	0798      	lsls	r0, r3, #30
 80011c4:	d5c6      	bpl.n	8001154 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c6:	f7ff fa13 	bl	80005f0 <HAL_GetTick>
 80011ca:	1b80      	subs	r0, r0, r6
 80011cc:	4540      	cmp	r0, r8
 80011ce:	d9f7      	bls.n	80011c0 <HAL_RCC_OscConfig+0x250>
 80011d0:	e711      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	42420000 	.word	0x42420000
 80011dc:	20000000 	.word	0x20000000
 80011e0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e4:	4d2b      	ldr	r5, [pc, #172]	; (8001294 <HAL_RCC_OscConfig+0x324>)
 80011e6:	686b      	ldr	r3, [r5, #4]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d03f      	beq.n	8001270 <HAL_RCC_OscConfig+0x300>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f0:	2200      	movs	r2, #0
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_RCC_OscConfig+0x328>)
 80011f4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80011f6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f8:	d12d      	bne.n	8001256 <HAL_RCC_OscConfig+0x2e6>
        tickstart = HAL_GetTick();
 80011fa:	f7ff f9f9 	bl	80005f0 <HAL_GetTick>
 80011fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	0199      	lsls	r1, r3, #6
 8001204:	d421      	bmi.n	800124a <HAL_RCC_OscConfig+0x2da>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001206:	6a23      	ldr	r3, [r4, #32]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d105      	bne.n	800121a <HAL_RCC_OscConfig+0x2aa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120e:	686b      	ldr	r3, [r5, #4]
 8001210:	68a2      	ldr	r2, [r4, #8]
 8001212:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001216:	4313      	orrs	r3, r2
 8001218:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121a:	686a      	ldr	r2, [r5, #4]
 800121c:	e9d4 3108 	ldrd	r3, r1, [r4, #32]
 8001220:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001224:	430b      	orrs	r3, r1
 8001226:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001228:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_RCC_OscConfig+0x328>)
 800122e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001230:	f7ff f9de 	bl	80005f0 <HAL_GetTick>
 8001234:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	019a      	lsls	r2, r3, #6
 800123a:	f53f aeaf 	bmi.w	8000f9c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123e:	f7ff f9d7 	bl	80005f0 <HAL_GetTick>
 8001242:	1b00      	subs	r0, r0, r4
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f6      	bls.n	8001236 <HAL_RCC_OscConfig+0x2c6>
 8001248:	e6d5      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124a:	f7ff f9d1 	bl	80005f0 <HAL_GetTick>
 800124e:	1b80      	subs	r0, r0, r6
 8001250:	2802      	cmp	r0, #2
 8001252:	d9d5      	bls.n	8001200 <HAL_RCC_OscConfig+0x290>
 8001254:	e6cf      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8001256:	f7ff f9cb 	bl	80005f0 <HAL_GetTick>
 800125a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	019b      	lsls	r3, r3, #6
 8001260:	f57f ae9c 	bpl.w	8000f9c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001264:	f7ff f9c4 	bl	80005f0 <HAL_GetTick>
 8001268:	1b00      	subs	r0, r0, r4
 800126a:	2802      	cmp	r0, #2
 800126c:	d9f6      	bls.n	800125c <HAL_RCC_OscConfig+0x2ec>
 800126e:	e6c2      	b.n	8000ff6 <HAL_RCC_OscConfig+0x86>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001270:	2801      	cmp	r0, #1
 8001272:	f43f aec1 	beq.w	8000ff8 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->CFGR;
 8001276:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001278:	6a22      	ldr	r2, [r4, #32]
 800127a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800127e:	4291      	cmp	r1, r2
 8001280:	f47f aea2 	bne.w	8000fc8 <HAL_RCC_OscConfig+0x58>
 8001284:	6a62      	ldr	r2, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001286:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128a:	4293      	cmp	r3, r2
 800128c:	f43f ae86 	beq.w	8000f9c <HAL_RCC_OscConfig+0x2c>
 8001290:	e69a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x58>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	42420000 	.word	0x42420000

0800129c <HAL_RCC_GetSysClockFreq>:
{
 800129c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80012a0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012a2:	ac02      	add	r4, sp, #8
 80012a4:	f103 0510 	add.w	r5, r3, #16
 80012a8:	4622      	mov	r2, r4
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	6859      	ldr	r1, [r3, #4]
 80012ae:	3308      	adds	r3, #8
 80012b0:	c203      	stmia	r2!, {r0, r1}
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	4614      	mov	r4, r2
 80012b6:	d1f7      	bne.n	80012a8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012b8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80012bc:	4911      	ldr	r1, [pc, #68]	; (8001304 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012be:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80012c2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80012c4:	f003 020c 	and.w	r2, r3, #12
 80012c8:	2a08      	cmp	r2, #8
 80012ca:	d117      	bne.n	80012fc <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012cc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80012d0:	3218      	adds	r2, #24
 80012d2:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012d6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012da:	d50c      	bpl.n	80012f6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012dc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012e4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e6:	3318      	adds	r3, #24
 80012e8:	446b      	add	r3, sp
 80012ea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ee:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80012f2:	b007      	add	sp, #28
 80012f4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_RCC_GetSysClockFreq+0x70>)
 80012f8:	4358      	muls	r0, r3
 80012fa:	e7fa      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80012fe:	e7f8      	b.n	80012f2 <HAL_RCC_GetSysClockFreq+0x56>
 8001300:	080014d0 	.word	0x080014d0
 8001304:	40021000 	.word	0x40021000
 8001308:	007a1200 	.word	0x007a1200
 800130c:	003d0900 	.word	0x003d0900

08001310 <HAL_RCC_ClockConfig>:
{
 8001310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001314:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001316:	4604      	mov	r4, r0
 8001318:	b910      	cbnz	r0, 8001320 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
}
 800131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001320:	4a46      	ldr	r2, [pc, #280]	; (800143c <HAL_RCC_ClockConfig+0x12c>)
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	428b      	cmp	r3, r1
 800132a:	d32a      	bcc.n	8001382 <HAL_RCC_ClockConfig+0x72>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	0798      	lsls	r0, r3, #30
 8001330:	d432      	bmi.n	8001398 <HAL_RCC_ClockConfig+0x88>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	07da      	lsls	r2, r3, #31
 8001336:	d445      	bmi.n	80013c4 <HAL_RCC_ClockConfig+0xb4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001338:	4a40      	ldr	r2, [pc, #256]	; (800143c <HAL_RCC_ClockConfig+0x12c>)
 800133a:	6813      	ldr	r3, [r2, #0]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	42ab      	cmp	r3, r5
 8001342:	d867      	bhi.n	8001414 <HAL_RCC_ClockConfig+0x104>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	4d3e      	ldr	r5, [pc, #248]	; (8001440 <HAL_RCC_ClockConfig+0x130>)
 8001348:	f013 0f04 	tst.w	r3, #4
 800134c:	d16e      	bne.n	800142c <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	071b      	lsls	r3, r3, #28
 8001352:	d506      	bpl.n	8001362 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001354:	686b      	ldr	r3, [r5, #4]
 8001356:	6922      	ldr	r2, [r4, #16]
 8001358:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800135c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001360:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001362:	f7ff ff9b 	bl	800129c <HAL_RCC_GetSysClockFreq>
 8001366:	686b      	ldr	r3, [r5, #4]
 8001368:	4a36      	ldr	r2, [pc, #216]	; (8001444 <HAL_RCC_ClockConfig+0x134>)
 800136a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	40d8      	lsrs	r0, r3
 8001372:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_RCC_ClockConfig+0x138>)
 8001374:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <HAL_RCC_ClockConfig+0x13c>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	f7ff f8f7 	bl	800056c <HAL_InitTick>
  return HAL_OK;
 800137e:	2000      	movs	r0, #0
 8001380:	e7cc      	b.n	800131c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	6813      	ldr	r3, [r2, #0]
 8001384:	f023 0307 	bic.w	r3, r3, #7
 8001388:	430b      	orrs	r3, r1
 800138a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138c:	6813      	ldr	r3, [r2, #0]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	428b      	cmp	r3, r1
 8001394:	d1c1      	bne.n	800131a <HAL_RCC_ClockConfig+0xa>
 8001396:	e7c9      	b.n	800132c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001398:	f013 0f04 	tst.w	r3, #4
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_RCC_ClockConfig+0x130>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139e:	bf1e      	ittt	ne
 80013a0:	685a      	ldrne	r2, [r3, #4]
 80013a2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80013a6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	6822      	ldr	r2, [r4, #0]
 80013aa:	0711      	lsls	r1, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ac:	bf42      	ittt	mi
 80013ae:	685a      	ldrmi	r2, [r3, #4]
 80013b0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80013b4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	68a1      	ldr	r1, [r4, #8]
 80013ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80013be:	430a      	orrs	r2, r1
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	e7b6      	b.n	8001332 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c4:	6862      	ldr	r2, [r4, #4]
 80013c6:	4e1e      	ldr	r6, [pc, #120]	; (8001440 <HAL_RCC_ClockConfig+0x130>)
 80013c8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013cc:	d11a      	bne.n	8001404 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	d0a2      	beq.n	800131a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	4313      	orrs	r3, r2
 80013e0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80013e2:	f7ff f905 	bl	80005f0 <HAL_GetTick>
 80013e6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e8:	6873      	ldr	r3, [r6, #4]
 80013ea:	6862      	ldr	r2, [r4, #4]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013f4:	d0a0      	beq.n	8001338 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f6:	f7ff f8fb 	bl	80005f0 <HAL_GetTick>
 80013fa:	1bc0      	subs	r0, r0, r7
 80013fc:	4540      	cmp	r0, r8
 80013fe:	d9f3      	bls.n	80013e8 <HAL_RCC_ClockConfig+0xd8>
        return HAL_TIMEOUT;
 8001400:	2003      	movs	r0, #3
 8001402:	e78b      	b.n	800131c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001404:	2a02      	cmp	r2, #2
 8001406:	d102      	bne.n	800140e <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001408:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800140c:	e7e1      	b.n	80013d2 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	f013 0f02 	tst.w	r3, #2
 8001412:	e7de      	b.n	80013d2 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001414:	6813      	ldr	r3, [r2, #0]
 8001416:	f023 0307 	bic.w	r3, r3, #7
 800141a:	432b      	orrs	r3, r5
 800141c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	42ab      	cmp	r3, r5
 8001426:	f47f af78 	bne.w	800131a <HAL_RCC_ClockConfig+0xa>
 800142a:	e78b      	b.n	8001344 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800142c:	686b      	ldr	r3, [r5, #4]
 800142e:	68e2      	ldr	r2, [r4, #12]
 8001430:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001434:	4313      	orrs	r3, r2
 8001436:	606b      	str	r3, [r5, #4]
 8001438:	e789      	b.n	800134e <HAL_RCC_ClockConfig+0x3e>
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000
 8001440:	40021000 	.word	0x40021000
 8001444:	080014c0 	.word	0x080014c0
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008

08001450 <__libc_init_array>:
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	2600      	movs	r6, #0
 8001454:	4d0c      	ldr	r5, [pc, #48]	; (8001488 <__libc_init_array+0x38>)
 8001456:	4c0d      	ldr	r4, [pc, #52]	; (800148c <__libc_init_array+0x3c>)
 8001458:	1b64      	subs	r4, r4, r5
 800145a:	10a4      	asrs	r4, r4, #2
 800145c:	42a6      	cmp	r6, r4
 800145e:	d109      	bne.n	8001474 <__libc_init_array+0x24>
 8001460:	f000 f822 	bl	80014a8 <_init>
 8001464:	2600      	movs	r6, #0
 8001466:	4d0a      	ldr	r5, [pc, #40]	; (8001490 <__libc_init_array+0x40>)
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <__libc_init_array+0x44>)
 800146a:	1b64      	subs	r4, r4, r5
 800146c:	10a4      	asrs	r4, r4, #2
 800146e:	42a6      	cmp	r6, r4
 8001470:	d105      	bne.n	800147e <__libc_init_array+0x2e>
 8001472:	bd70      	pop	{r4, r5, r6, pc}
 8001474:	f855 3b04 	ldr.w	r3, [r5], #4
 8001478:	4798      	blx	r3
 800147a:	3601      	adds	r6, #1
 800147c:	e7ee      	b.n	800145c <__libc_init_array+0xc>
 800147e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001482:	4798      	blx	r3
 8001484:	3601      	adds	r6, #1
 8001486:	e7f2      	b.n	800146e <__libc_init_array+0x1e>
 8001488:	080014e4 	.word	0x080014e4
 800148c:	080014e4 	.word	0x080014e4
 8001490:	080014e4 	.word	0x080014e4
 8001494:	080014e8 	.word	0x080014e8

08001498 <memset>:
 8001498:	4603      	mov	r3, r0
 800149a:	4402      	add	r2, r0
 800149c:	4293      	cmp	r3, r2
 800149e:	d100      	bne.n	80014a2 <memset+0xa>
 80014a0:	4770      	bx	lr
 80014a2:	f803 1b01 	strb.w	r1, [r3], #1
 80014a6:	e7f9      	b.n	800149c <memset+0x4>

080014a8 <_init>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr

080014b4 <_fini>:
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	bf00      	nop
 80014b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ba:	bc08      	pop	{r3}
 80014bc:	469e      	mov	lr, r3
 80014be:	4770      	bx	lr
